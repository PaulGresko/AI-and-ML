{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "GMfOHTvFBfdC"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import load_wine\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.preprocessing import StandardScaler"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R1MRb8vGAMHl"
      },
      "source": [
        "# 1. Загрузить датасет WINE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "BJO4RhZ_ADuW"
      },
      "outputs": [],
      "source": [
        "wine = load_wine(as_frame=True)\n",
        "X = wine.data[['magnesium', 'flavanoids', 'proanthocyanins']]\n",
        "y = wine.target"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hROB3ifSAN53"
      },
      "source": [
        "# 2. Подготовить выборки: обучающую 70% и тестовую 30%."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "6MKXyQxtAJR0"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [],
      "source": [
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rGWSucG6AQA2"
      },
      "source": [
        "# 3. Построить указанные в задании классификаторы."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "A78LV5OSAQJi",
        "outputId": "4795d0f6-4ed8-4604-8818-a84a375696b4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8333333333333334"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=3)\n",
        "knn.fit(X_train_scaled, y_train)\n",
        "y_pred_knn = knn.predict(X_test_scaled)\n",
        "accuracy_knn = accuracy_score(y_test, y_pred_knn)\n",
        "accuracy_knn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.7962962962962963"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nb = GaussianNB()\n",
        "nb.fit(X_train_scaled, y_train)\n",
        "y_pred_nb = nb.predict(X_test_scaled)\n",
        "accuracy_nb = accuracy_score(y_test, y_pred_nb)\n",
        "accuracy_nb"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TVYgJVNmAQSq"
      },
      "source": [
        "# 4. Провести анализ главных компонент с числом компонент =2."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [],
      "source": [
        "pca = PCA(n_components=2)\n",
        "X_train_pca = pca.fit_transform(X_train_scaled)\n",
        "X_test_pca = pca.transform(X_test_scaled)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DPzOCe8TAQc0"
      },
      "source": [
        "# 5. Получить оценку качества классификации в новом пространстве признаков с использованием указанных классификаторов."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.7407407407407407"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn_pca = KNeighborsClassifier(n_neighbors=3)\n",
        "knn_pca.fit(X_train_pca, y_train)\n",
        "y_pred_knn_pca = knn_pca.predict(X_test_pca)\n",
        "accuracy_knn_pca = accuracy_score(y_test, y_pred_knn_pca)\n",
        "accuracy_knn_pca"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.7407407407407407"
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nb_pca = GaussianNB()\n",
        "nb_pca.fit(X_train_pca, y_train)\n",
        "y_pred_nb_pca = nb_pca.predict(X_test_pca)\n",
        "accuracy_nb_pca = accuracy_score(y_test, y_pred_nb_pca)\n",
        "accuracy_nb_pca"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fHJ6aof1AQmn"
      },
      "source": [
        "# 6. Провести линейный дискриминантный анализ путем построения одного признака."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "OFjd6mP2AQrG"
      },
      "outputs": [],
      "source": [
        "lda = LinearDiscriminantAnalysis(n_components=1)\n",
        "X_train_lda = lda.fit_transform(X_train_scaled, y_train)\n",
        "X_test_lda = lda.transform(X_test_scaled)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kw-AL4RYAQvS"
      },
      "source": [
        "# 7. Получить оценку качества классификации для построенного признака с использованием указанных классификаторов."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8333333333333334"
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn_lda = KNeighborsClassifier(n_neighbors=3)\n",
        "knn_lda.fit(X_train_lda, y_train)\n",
        "y_pred_knn_lda = knn_lda.predict(X_test_lda)\n",
        "accuracy_knn_lda = accuracy_score(y_test, y_pred_knn_lda)\n",
        "accuracy_knn_lda"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8703703703703703"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "nb_lda = GaussianNB()\n",
        "nb_lda.fit(X_train_lda, y_train)\n",
        "y_pred_nb_lda = nb_lda.predict(X_test_lda)\n",
        "accuracy_nb_lda = accuracy_score(y_test, y_pred_nb_lda)\n",
        "accuracy_nb_lda"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5z55C4KQAbmw"
      },
      "source": [
        "# 8. Сравнить результаты классификации в п5 и п 7 с лучшей парой признаков и классификатором из Задания 4."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AR3Hg0YDG0o5"
      },
      "source": [
        "Лучшие пары из задания 4:\n",
        "\n",
        "Accuracy of KNeighbors for [flavanoids, proanthocyanins]: 0.87\n",
        "\n",
        "Accuracy of KNeighbors for [magnesium, flavanoids]: 0.87"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RoOSPTkdAcdm"
      },
      "source": [
        "# 9. Сделать вывод."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "KNN Accuracy (Original): 0.8333333333333334\n",
            "NB Accuracy (Original): 0.7962962962962963\n",
            "KNN Accuracy (PCA): 0.7407407407407407\n",
            "NB Accuracy (PCA): 0.7407407407407407\n",
            "KNN Accuracy (LDA): 0.8333333333333334\n",
            "NB Accuracy (LDA): 0.8703703703703703\n"
          ]
        }
      ],
      "source": [
        "print(f\"KNN Accuracy (Original): {accuracy_knn}\")\n",
        "print(f\"NB Accuracy (Original): {accuracy_nb}\")\n",
        "print(f\"KNN Accuracy (PCA): {accuracy_knn_pca}\")\n",
        "print(f\"NB Accuracy (PCA): {accuracy_nb_pca}\")\n",
        "print(f\"KNN Accuracy (LDA): {accuracy_knn_lda}\")\n",
        "print(f\"NB Accuracy (LDA): {accuracy_nb_lda}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Методы снижения размерности (PCA и LDA) показали различные результаты: LDA продемонстрировал лучшую точность (87.04%) по сравнению с PCA. PCA показал немного худшие результаты.\n",
        "\n",
        "LDA показал одинаковую или худшую точность для обеих моделей по сравнению с оригинальными признаками.\n",
        "\n",
        "Использование методов снижения размерности в целом привело к улучшению результатов классификации только в случае с LDA.\n",
        "\n",
        "LDA оказался более эффективным методом для данной задачи, что может быть связано с тем, что он учитывает информацию о классах при построении нового признака.\n",
        "\n",
        "Разница в результатах между PCA и LDA подчеркивает важность выбора метода снижения размерности. LDA оказался более эффективным, что связано с тем, что он адаптирован к задаче классификации, тогда как PCA — более общий метод."
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.4"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
